name: FrontEnd.Ecommerce .NET

on:
  push:
    branches: ["frontend"]
  pull_request:
    branches: ["frontend"]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/fe.ecommerce

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore Ecommerce/Ecommerce.WebApp.FrontEnd/Ecommerce.WebApp.FrontEnd.Server/Ecommerce.WebApp.FrontEnd.Server.csproj

      - name: Build
        run: dotnet build Ecommerce/Ecommerce.WebApp.FrontEnd/Ecommerce.WebApp.FrontEnd.Server/Ecommerce.WebApp.FrontEnd.Server.csproj --no-restore

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log into Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Ecommerce/Ecommerce.WebApp.FrontEnd/Ecommerce.WebApp.FrontEnd.Server/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set up kubectl
        if: github.event_name != 'pull_request'
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config

      - name: Apply Kubernetes manifests
        if: github.event_name != 'pull_request'
        run: |
          kubectl apply -f deployments/frontend/deployment.yml
          kubectl apply -f deployments/frontend/service.yml
          kubectl apply -f deployments/frontend/ingress.yml

      - name: Update Kubernetes Deployment image
        if: github.event_name != 'pull_request'
        run: |
          kubectl set image deployment/fe-ecommerce -n ecommerce fe-ecommerce=${{ env.IMAGE_NAME }}:${{ github.sha }}
          kubectl rollout status deployment/fe-ecommerce -n ecommerce
      # livenessProbe và readinessProbe là hai loại probes trong Kubernetes giúp kiểm tra sức khỏe của các containers trong Pods.
      # Chúng giúp Kubernetes quản lý và duy trì trạng thái của các ứng dụng.
      # Liveness Probe: Kiểm tra xem container có đang hoạt động hay không. Nếu container không hoạt động, Kubernetes sẽ khởi động lại container đó.
      # Readiness Probe: Kiểm tra xem container có sẵn sàng để phục vụ requests hay không. Nếu container không sẵn sàng, Kubernetes sẽ không gửi traffic đến container đó.
      - name: Monitor Deployment rollout
        if: github.event_name != 'pull_request'
        run: |
          kubectl rollout restart deployment/fe-ecommerce -n ecommerce

      - name: Rollback if Deployment fails
        if: github.event_name != 'pull_request'
        run: |
          if ! kubectl rollout status deployment/fe-ecommerce -n ecommerce --timeout=5m; then
            echo "Deployment failed, rolling back"
            kubectl rollout undo deployment/fe-ecommerce -n ecommerce
            exit 1
          fi
