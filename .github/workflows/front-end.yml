name: FrontEnd.Ecommerce .NET

on:
  push:
    branches: ["frontend"]
  pull_request:
    branches: ["frontend"]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/fe.ecommerce

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore Ecommerce/Ecommerce.WebApp.Server/Ecommerce.WebApp.Server.csproj
      - name: Build
        run: dotnet build Ecommerce/Ecommerce.WebApp.Server/Ecommerce.WebApp.Server.csproj --no-restore

      # - name: Retryable Docker login
      #   id: docker_login
      #   run: |
      #     retries=3
      #     until [ $retries -le 0 ]; do
      #       echo "Logging into Docker Hub..."
      #       echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin && break
      #       retries=$((retries - 1))
      #       echo "Retrying Docker login in 10 seconds..."
      #       sleep 10
      #     done
      #   shell: bash

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Configure Docker credential helper
        run: |
          mkdir -p ~/.docker
          echo '{ "credsStore": "secretservice" }' > ~/.docker/config.json

      - name: Log into Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Ecommerce/Ecommerce.WebApp.Server/Dockerfile
          push: true
<<<<<<< HEAD
          tags: ${{ secrets.DOCKER_USERNAME }}/ecommerce-webapp-server:latest
          retries: 3
          retry-delay: 10s
=======
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

>>>>>>> 325ebe8 (Config readinessProbe for k8s)
      - name: Set up kubectl
        if: github.event_name != 'pull_request'
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config

      - name: Apply Kubernetes manifests
        if: github.event_name != 'pull_request'
        run: |
          kubectl apply -f deployments/frontend/deployment.yml
          kubectl apply -f deployments/frontend/service.yml

      - name: Update Kubernetes Deployment image
        if: github.event_name != 'pull_request'
        run: |
          kubectl set image deployment/web-ecommerce -n ecommerce web-ecommerce=${{ env.IMAGE_NAME }}:${{ github.sha }}
          kubectl rollout status deployment/web-ecommerce -n ecommerce
      # livenessProbe và readinessProbe là hai loại probes trong Kubernetes giúp kiểm tra sức khỏe của các containers trong Pods.
      # Chúng giúp Kubernetes quản lý và duy trì trạng thái của các ứng dụng.
      # Liveness Probe: Kiểm tra xem container có đang hoạt động hay không. Nếu container không hoạt động, Kubernetes sẽ khởi động lại container đó.
      # Readiness Probe: Kiểm tra xem container có sẵn sàng để phục vụ requests hay không. Nếu container không sẵn sàng, Kubernetes sẽ không gửi traffic đến container đó.
      - name: Monitor Deployment rollout
        if: github.event_name != 'pull_request'
        run: |
          kubectl rollout restart deployment/web-ecommerce -n ecommerce

      - name: Rollback if Deployment fails
        if: github.event_name != 'pull_request'
        run: |
          if ! kubectl rollout status deployment/web-ecommerce -n ecommerce --timeout=5m; then
            echo "Deployment failed, rolling back"
            kubectl rollout undo deployment/web-ecommerce -n ecommerce
            exit 1
          fi
